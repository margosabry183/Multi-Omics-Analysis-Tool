## ----message=FALSE------------------------------------------------------------
library(data.table)
## ----message=FALSE------------------------------------------------------------
library(data.table)
library(MOFA2)
## -----------------------------------------------------------------------------
data <- make_example_data(
n_views = 2,
n_samples = 200,
n_features = 1000,
n_factors = 10
)[[1]]
lapply(data,dim)
## ----message=FALSE------------------------------------------------------------
MOFAobject <- create_mofa(data)
## -----------------------------------------------------------------------------
plot_data_overview(MOFAobject)
## ----message=FALSE------------------------------------------------------------
N = ncol(data[[1]])
groups = c(rep("A",N/2), rep("B",N/2))
MOFAobject <- create_mofa(data, groups=groups)
## -----------------------------------------------------------------------------
plot_data_overview(MOFAobject)
## -----------------------------------------------------------------------------
filepath <- system.file("extdata", "test_data.RData", package = "MOFA2")
load(filepath)
head(dt)
## -----------------------------------------------------------------------------
MOFAobject <- create_mofa(dt)
print(MOFAobject)
## ----out.width = "80%"--------------------------------------------------------
plot_data_overview(MOFAobject)
## -----------------------------------------------------------------------------
data_opts <- get_default_data_options(MOFAobject)
head(data_opts)
## -----------------------------------------------------------------------------
model_opts <- get_default_model_options(MOFAobject)
model_opts$num_factors <- 10
head(model_opts)
## -----------------------------------------------------------------------------
train_opts <- get_default_training_options(MOFAobject)
head(train_opts)
## ----message=FALSE------------------------------------------------------------
MOFAobject <- prepare_mofa(
object = MOFAobject,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts
)
## -----------------------------------------------------------------------------
outfile = file.path(getwd(),"model.hdf5")
MOFAobject.trained <- run_mofa(MOFAobject, outfile)
## -----------------------------------------------------------------------------
sessionInfo()
runMOFA <- function(object, outfile=NULL) {
# Sanity checks on the model
if (!is(object, "MOFAmodel"))
stop("'object' has to be an instance of MOFAmodel")
if (length(ModelOptions(object))==0)
stop("Can't find the model options, did you run prepareMOFA?")
if (length(TrainOptions(object))==0)
stop("Can't find the training options, did you run prepareMOFA?")
if (length(DataOptions(object))==0)
stop("Can't find the data options, did you run prepareMOFA?")
# Sanity checks on the output file
if (is.null(outfile)) {
print("No output file provided, using a temporary file...")
outfile <- tempfile()
} else {
if (!dir.exists(dirname(outfile))) {
print("Output directory not found, creating it...")
dir.create(dirname(outfile), recursive = TRUE, showWarnings = TRUE)
}
}
if (Status(object)=="trained")
stop("The model is already trained! If you want to retrain, create a new untrained MOFAmodel")
# Initiate reticulate
mofa <- tryCatch({
import("mofapy")
}, error = function(err) {
stop("mofapy package not found. Make sure that Reticulate is pointing to the right Python binary.\
Please read the instructions here: https://github.com/bioFAM/MOFA#installation")
}
)
mofa_entrypoint <- mofa$core.entry_point$entry_point()
# Pass data
mofa_entrypoint$set_data(data=unname(lapply(getTrainData(object), function(x) r_to_py(t(x)))))
# Pass model options
mofa_entrypoint$set_model_options(
factors        = ModelOptions(object)$numFactors,
likelihoods    = unname(ModelOptions(object)$likelihood),
learnIntercept = FALSE,
sparsity       = ModelOptions(object)$sparsity
)
#TO BE FIXED: This should also be saved along with ModelOptions.
numFactors <- ModelOptions(object)$numFactors
# Pass data processing options
mofa_entrypoint$set_data_options(
view_names              = viewNames(object),
center_features         = TRUE,
scale_views             = DataOptions(object)$scaleViews,
RemoveIncompleteSamples = DataOptions(object)$removeIncompleteSamples
)
# Parse data
mofa_entrypoint$parse_data()
# Pass training options
mofa_entrypoint$set_train_options(
iter       = TrainOptions(object)$maxiter,
tolerance  = TrainOptions(object)$tolerance,
dropR2     = TrainOptions(object)$DropFactorThreshold,
seed       = TrainOptions(object)$seed,
verbose    = TrainOptions(object)$verbose
)
# Define priors
mofa_entrypoint$define_priors()
# Define initialisations
mofa_entrypoint$define_init()
# Parse the intercept factor
mofa_entrypoint$parse_intercept()
# Train the model
mofa_entrypoint$train_model()
# Save the model
sample_names <- colnames(getTrainData(object)[[1]])
feature_names <- unname(lapply(getTrainData(object),rownames))
mofa_entrypoint$save_model(
outfile, sample_names=sample_names, feature_names=feature_names
)
# Load the model back into R
object <- loadModel(outfile, object)
#TO BE FIXED: Workaround as numFactors is not saved in ModelOpts
ModelOptions(object)$numFactors <- numFactors
return(object)
}
getwd()
## ----message=FALSE------------------------------------------------------------
library(data.table)
library(MOFA2)
## -----------------------------------------------------------------------------
data <- make_example_data(
n_views = 2,
n_samples = 200,
n_features = 1000,
n_factors = 10
)[[1]]
lapply(data,dim)
## ----message=FALSE------------------------------------------------------------
MOFAobject <- create_mofa(data)
## -----------------------------------------------------------------------------
plot_data_overview(MOFAobject)
## ----message=FALSE------------------------------------------------------------
N = ncol(data[[1]])
groups = c(rep("A",N/2), rep("B",N/2))
MOFAobject <- create_mofa(data, groups=groups)
## -----------------------------------------------------------------------------
plot_data_overview(MOFAobject)
## -----------------------------------------------------------------------------
filepath <- system.file("extdata", "test_data.RData", package = "MOFA2")
load(filepath)
head(dt)
## -----------------------------------------------------------------------------
MOFAobject <- create_mofa(dt)
print(MOFAobject)
## ----out.width = "80%"--------------------------------------------------------
plot_data_overview(MOFAobject)
## -----------------------------------------------------------------------------
data_opts <- get_default_data_options(MOFAobject)
head(data_opts)
## -----------------------------------------------------------------------------
model_opts <- get_default_model_options(MOFAobject)
model_opts$num_factors <- 10
head(model_opts)
## -----------------------------------------------------------------------------
train_opts <- get_default_training_options(MOFAobject)
head(train_opts)
## ----message=FALSE------------------------------------------------------------
MOFAobject <- prepare_mofa(
object = MOFAobject,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts
)
## -----------------------------------------------------------------------------
outfile = file.path(getwd(),"model.hdf5")
MOFAobject.trained <- run_mofa(MOFAobject, outfile)
## -----------------------------------------------------------------------------
sessionInfo()
filepath <- system.file("extdata", "data.txt", package = "MOFA2")
load(filepath)
## -----------------------------------------------------------------------------
filepath <- system.file("extdata", "data.txt.gz", package = "MOFA2")
load(filepath)
filepath <- system.file("extdata", "test_data.RData", package = "MOFA2")
load(filepath)
filepath <- system.file("extdata", "data.RData", package = "MOFA2")
load(filepath)
<iframe width='400' height='440' src='https://rdrr.io/snippets/embed/' frameborder='0'></iframe>
shiny::runApp('D:/Graduation Project/New2/Compressed/mofaplus-shiny-master/app')
runApp('D:/Graduation Project/code')
runApp('D:/Graduation Project/code')
runApp('D:/Graduation Project/code')
runApp('D:/Graduation Project/code')
runApp('D:/Graduation Project/code')
runApp('D:/Graduation Project/code')
# Load data (in data.frame format)
file <- system.file("extdata", "test_data.RData", package = "MOFA2")
load(file)
# Create the MOFA object
MOFAmodel <- create_mofa(dt)
# Prepare the MOFA object with default options
MOFAmodel <- prepare_mofa(MOFAmodel)
# Run the MOFA model
## Not run:  MOFAmodel <- run_mofa(MOFAmodel, use_basilisk = TRUE)
# Load data (in data.frame format)
file <- system.file("extdata", "test_data.RData", package = "MOFA2")
load(file)
# Create the MOFA object
MOFAmodel <- create_mofa(dt)
# Prepare the MOFA object with default options
MOFAmodel <- prepare_mofa(MOFAmodel)
# Run the MOFA model
## Not run:  MOFAmodel <- run_mofa(MOFAmodel, use_basilisk = TRUE)
getwd()
## Not run:  MOFAmodel <- run_mofa(MOFAmodel, use_basilisk = TRUE)
runApp('D:/Graduation Project/code')
## ----message=FALSE------------------------------------------------------------
library(data.table)
library(MOFA2)
## -----------------------------------------------------------------------------
data <- make_example_data(
n_views = 2,
n_samples = 200,
n_features = 1000,
n_factors = 10
)[[1]]
lapply(data,dim)
## ----message=FALSE------------------------------------------------------------
MOFAobject <- create_mofa(data)
## -----------------------------------------------------------------------------
plot_data_overview(MOFAobject)
## ----message=FALSE------------------------------------------------------------
N = ncol(data[[1]])
groups = c(rep("A",N/2), rep("B",N/2))
MOFAobject <- create_mofa(data, groups=groups)
## -----------------------------------------------------------------------------
plot_data_overview(MOFAobject)
## -----------------------------------------------------------------------------
dt = fread("data.txt.gz")
#filepath <- system.file("extdata", "test_data.RData", package = "MOFA2")
#load(filepath)
head(dt)
dt[,group:=NULL]
## -----------------------------------------------------------------------------
MOFAobject <- create_mofa(dt)
print(MOFAobject)
## ----out.width = "80%"--------------------------------------------------------
plot_data_overview(MOFAobject)
## -----------------------------------------------------------------------------
data_opts <- get_default_data_options(MOFAobject)
head(data_opts)
## -----------------------------------------------------------------------------
model_opts <- get_default_model_options(MOFAobject)
model_opts$num_factors <- 10
head(model_opts)
## -----------------------------------------------------------------------------
train_opts <- get_default_training_options(MOFAobject)
head(train_opts)
## ----message=FALSE------------------------------------------------------------
MOFAobject <- prepare_mofa(
object = MOFAobject,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts
)
## -----------------------------------------------------------------------------
outfile = file.path(getwd(),"model.hdf5")
MOFAobject.trained <- run_mofa(MOFAobject, outfile)
## -----------------------------------------------------------------------------
sessionInfo()
shiny::runApp('D:/Graduation Project/code')
runApp('D:/Graduation Project/code')
runApp('D:/Graduation Project/code')
runApp('D:/Graduation Project/code')
runApp('D:/Graduation Project/code')
runApp('D:/Graduation Project/code')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
reticulate::py_config()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp('D:/Graduation Project/New2/Compressed/mofaplus-shiny-master/app')
runApp('D:/Graduation Project/New2/Compressed/mofaplus-shiny-master/app')
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
